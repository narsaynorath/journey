input PlanRelateToManyInput {
  create: [PlanCreateInput]
  connect: [PlanWhereUniqueInput]
  disconnect: [PlanWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  username: String
  email: String
  password_is_set: Boolean
  plans(
    where: PlanWhereInput
    search: String
    sortBy: [SortPlansBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Plan!]!
  _plansMeta(
    where: PlanWhereInput
    search: String
    sortBy: [SortPlansBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  username: String
  username_not: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  username_i: String
  username_not_i: String
  username_contains_i: String
  username_not_contains_i: String
  username_starts_with_i: String
  username_not_starts_with_i: String
  username_ends_with_i: String
  username_not_ends_with_i: String
  username_in: [String]
  username_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """
   condition must be true for all nodes
  """
  plans_every: PlanWhereInput

  """
   condition must be true for at least 1 node
  """
  plans_some: PlanWhereInput

  """
   condition must be false for all nodes
  """
  plans_none: PlanWhereInput
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
}

input UserUpdateInput {
  name: String
  username: String
  email: String
  password: String
  plans: PlanRelateToManyInput
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  username: String
  email: String
  password: String
  plans: PlanRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Plan {
  id: ID!
  title: String
  destination: String
  tripStart: String
  tripEnd: String
  user: User
}

input PlanWhereInput {
  AND: [PlanWhereInput]
  OR: [PlanWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  destination: String
  destination_not: String
  destination_contains: String
  destination_not_contains: String
  destination_starts_with: String
  destination_not_starts_with: String
  destination_ends_with: String
  destination_not_ends_with: String
  destination_i: String
  destination_not_i: String
  destination_contains_i: String
  destination_not_contains_i: String
  destination_starts_with_i: String
  destination_not_starts_with_i: String
  destination_ends_with_i: String
  destination_not_ends_with_i: String
  destination_in: [String]
  destination_not_in: [String]
  tripStart: String
  tripStart_not: String
  tripStart_lt: String
  tripStart_lte: String
  tripStart_gt: String
  tripStart_gte: String
  tripStart_in: [String]
  tripStart_not_in: [String]
  tripEnd: String
  tripEnd_not: String
  tripEnd_lt: String
  tripEnd_lte: String
  tripEnd_gt: String
  tripEnd_gte: String
  tripEnd_in: [String]
  tripEnd_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
}

input PlanWhereUniqueInput {
  id: ID!
}

enum SortPlansBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  destination_ASC
  destination_DESC
  tripStart_ASC
  tripStart_DESC
  tripEnd_ASC
  tripEnd_DESC
}

input PlanUpdateInput {
  title: String
  destination: String
  tripStart: String
  tripEnd: String
  user: UserRelateToOneInput
}

input PlansUpdateInput {
  id: ID!
  data: PlanUpdateInput
}

input PlanCreateInput {
  title: String
  destination: String
  tripStart: String
  tripEnd: String
  user: UserRelateToOneInput
}

input PlansCreateInput {
  data: PlanCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Plan item.
  """
  createPlan(data: PlanCreateInput): Plan

  """
   Create multiple Plan items.
  """
  createPlans(data: [PlansCreateInput]): [Plan]

  """
   Update a single Plan item by ID.
  """
  updatePlan(id: ID!, data: PlanUpdateInput): Plan

  """
   Update multiple Plan items by ID.
  """
  updatePlans(data: [PlansUpdateInput]): [Plan]

  """
   Delete a single Plan item by ID.
  """
  deletePlan(id: ID!): Plan

  """
   Delete multiple Plan items by ID.
  """
  deletePlans(ids: [ID!]): [Plan]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  username: String
  email: String
  password: String
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [User]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Plan items which match the where clause.
  """
  allPlans(
    where: PlanWhereInput
    search: String
    sortBy: [SortPlansBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Plan]

  """
   Search for the Plan item with the matching ID.
  """
  Plan(where: PlanWhereUniqueInput!): Plan

  """
   Perform a meta-query on all Plan items which match the where clause.
  """
  _allPlansMeta(
    where: PlanWhereInput
    search: String
    sortBy: [SortPlansBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
